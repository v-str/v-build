#!/bin/bash

# -----------------------------------------------------------------------------
#                                PREPARE
# -----------------------------------------------------------------------------

export HOME=/root
export V_BUILD_LOG_FILE=$HOME/v-build_log
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib"

mount_info=/root/mount_info
temp_blkd="/root/temp_blkd"
blkd_info="/root/blkd_info"
fs_type=""
uuid=""
part=""

function kmsg(){
  echo "$1" > /dev/kmsg
}

# ********************************************
# Create partition list text file

function construct_partition_list(){
  [ -f "$temp_blkd" ] && rm -rf $temp_blkd
  [ -f "$blkd_info" ] && rm -rf $blkd_info

  kmsg "construct partition list fdisk"

  /usr/sbin/fdisk -l | grep "^/dev" | awk '{print $1}' > $temp_blkd

  kmsg "construct partition list blkinfo"

  touch $blkd_info > /dev/null 2>&1
  for blk in `cat $temp_blkd`
  do
    lsblk --fs $blk | sed '/NAME/d' | awk '{print $1,$2}' >> $blkd_info
  done

  cat $blkd_info >> $V_BUILD_LOG_FILE
}

# ********************************************
# Determine all partition types, and then
# mount all by UUID into /disk/UUID

function mount_fs() {

  kmsg "mount fs"

  mkdir -p /disk/$uuid > /dev/null 2>&1
  mount UUID=$uuid /disk/$uuid > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    rm /disk/$uuid -rf > /dev/null 2>&1
  fi
}

function mount_vmfs() {
  kmsg "mount vmfs"
  mkdir -p /disk/$uuid > /dev/null 2>&1
  vmfs-fuse /dev/$part /disk/$uuid > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    rm /disk/$uuid -rf > /dev/null 2>&1
  fi
  echo
}

function mount_by_uuid() {
  kmsg "mount by uuid"
  if [ -n "$uuid" ]; then
    [ "$fs_type" == "ext4" ] && mount_fs
    [ "$fs_type" == "ext3" ] && mount_fs
    [ "$fs_type" == "ext2" ] && mount_fs
    [ "$fs_type" == "vfat" ] && mount_fs
    [ "$fs_type" == "ntfs" ] && mount_fs
    [ "$fs_type" == "VMFS_volume_member" ] && mount_vmfs
    [ "$fs_type" == "xfs" ] && mount_fs
  fi
}

function mount_loop(){
  kmsg "mount loop"
  cat $blkd_info | while read blk
do
  part=`echo $blk | awk '{print $1}'`
  fs_type=`echo $blk | awk '{print $2}'`
  uuid=`blkid -sUUID -ovalue "/dev/$part"`

  mount_by_uuid
done

rm -rf $blkd_info $temp_blkd > /dev/null 2>&1
}

# ********************************************
# Mount all lvm partitions by LV UUID

function mount_lvm(){

  kmsg "mount lvm"
  vgchange -ay > /dev/null 2>&1

  pvname=/root/pvname
  lv=/root/lv
  pvuuid=/root/uuid
  lv_sum_temp=/root/lv_sum_temp
  lv_sum=/root/lv_sum

  pvdisplay -m | grep "PV Name" > $pvname
  pvdisplay -m | grep "Logical volume" > $lv
  pvdisplay -m | grep "PV UUID" > $pvuuid

  [ -f $lv_sum ] && rm -f $lv_sum
  touch $lv_sum > /dev/null 2>&1

  count=`cat $pvname | wc -l`

  for (( C=1; C<=$count; C++ ))
  do
    touch $lv_sum_temp > /dev/null 2>&1
    cat $pvname | head -n $C | tail -n 1 | awk '{print $3}'>> $lv_sum_temp
    cat $lv | head -n $C | tail -n 1 | awk '{print $3}'>> $lv_sum_temp
    cat $pvuuid | head -n $C | tail -n 1 | awk '{print $3}'>> $lv_sum_temp
    cat $lv_sum_temp | awk 'BEGIN { ORS = " "} { print }' >> $lv_sum
    printf "\n" >> $lv_sum
    rm $lv_sum_temp > /dev/null 2>&1
  done

  cat $lv_sum | while read lv_blk
do
  part=`echo $lv_blk | awk '{print $1}'`
  lv_part=`echo $lv_blk | awk '{print $2}'`
  uuid=`echo $lv_blk | awk '{print $3}'`

  mkdir -p /disk/$uuid > /dev/null 2>&1
  mount $lv_part /disk/$uuid > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    rm -rf /disk/$uuid > /dev/null 2>&1
  fi
done

rm -f $pvname $lv $pvuuid $lv_sum_temp $lv_sum
}

# -----------------------------------------------------------------------------
#                                 START
# -----------------------------------------------------------------------------

function start() {
  udevadm settle
  construct_partition_list
  mount_loop
  mount_lvm

  [ -e /disk/dev ] && rm -rf /disk/dev
}

case $1 in
  start)
    start
    ;;
  stop)
    umount -l --force /disk/* > /dev/null 2>&1
    ;;
  *)
    ;;
esac
